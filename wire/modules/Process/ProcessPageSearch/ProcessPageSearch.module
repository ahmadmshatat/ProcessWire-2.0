<?php

/**
 * ProcessWire Page Search Process
 *
 * Provides page searching within the ProcessWire admin
 *
 * Note that this module is currently very simple and lacks pagination. 
 * This will be expanded more in the near future. 
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageSearch extends Process implements ConfigurableModule {

	static public function getModuleInfo() {
		return array(
			'title' => 'Page Search', 
			'summary' => 'Provices a page search engine for admin use.', 
			'version' => 100, 
			);
	}

	public function ___execute() {
			
		if(isset($_GET['q'])) $q = substr($_GET['q'], 0, 50);
			else return "<p>No search query provided.</p>";
		
		$q = $this->sanitizer->selectorValue($q);
		$values = explode(' ', $q);
		$selector = '';
		
		$searchFields = $this->searchFields;
		if(is_string($searchFields)) $searchFields = explode(' ', $searchFields); 

		foreach($values as $value) {
			foreach($searchFields as $fieldName) {
				$fieldName = preg_replace('/[^-_a-zA-Z.0-9]/', '', $fieldName);
				$selector .= "$fieldName|";
			}
			$selector = rtrim($selector, '|') . "*=$value,";
		}

		$selector .= "limit=50";
		$matches = $this->pages->find($selector);

		$this->displayField = explode(' ', trim($this->displayField)); // convert to array 
		if(!count($this->displayField)) $this->displayField = array('path');

		return ($this->config->debug ? "<h2>$selector</h2>" : '') . $this->renderMatches($matches);
	}   

	protected function renderMatches(PageArray $matches, $id = 'ProcessPageSearchResults') {

		$out = '';

		foreach($matches as $match) {

			$out .= "\n\t<li><a href='{$this->config->urls->admin}page/edit/?id={$match->id}'>";

			foreach($this->displayField as $name) {
				$value = $match->get($name); 
				$out .= "<span class='ProcessPageSearchResult_$name'>" . htmlspecialchars($value) . " </span>";
				
			}

			$out .= "</a></li>";

		}
		if($out) $out = "\n<ul id='$id'>$out\n</ul>";
			else $out = "\n<p>No pages found</p>";

		return $out; 
	}

	public function renderSearchForm() {

		$q = isset($_GET['q']) ? substr($_GET['q'], 0, 50) : '';
		$q = htmlentities($q, ENT_QUOTES, "UTF-8"); 

		$out = 	"\n<form id='ProcessPageSearchForm' action='{$this->config->urls->admin}page/search/' method='get'>" . 
			"\n\t<input type='text' id='ProcessPageSearchQuery' name='q' value='$q' />" . 
			"\n\t<input type='submit' id='ProcessPageSearchSubmit' name='search' value='Search' />" . 
			"\n\t<span id='ProcessPageSearchStatus'></span>" . 
			"\n</form>";

		return $out; 
		
	}

	static public function getModuleConfigInputfields(array $data) {

		$inputfields = new InputfieldWrapper();

                $inputfield = Wire::getFuel('modules')->get("InputfieldText");
                $inputfield->attr('name', 'searchFields');
                if(!isset($data['searchFields'])) $data['searchFields'] = 'title body';
                if(is_array($data['searchFields'])) $data['searchFields'] = implode(' ', $data['searchFields']);
                $inputfield->attr('value', $data['searchFields']);
                $inputfield->label = "Fields to search";
                $inputfield->description = "Enter the names for one or more text-based fields that you want to search, separating each by a space. ";
                $inputfields->append($inputfield);

		$inputfield = Wire::getFuel('modules')->get("InputfieldText"); 
		$inputfield->attr('name', 'displayField'); 
		$inputfield->attr('value', isset($data['displayField']) ? $data['displayField'] : 'name'); 
		$inputfield->label = "Field name(s) to display in search results";
		$inputfield->description = "If specifying more than one field, separate each with a space.";
		$inputfields->append($inputfield); 

		return $inputfields; 
	}

}

