<?php

/**
 * ProcessWire 'Hello world' demonstration module
 *
 * Demonstrates the Module interface and how to add hooks.
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class Helloworld extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Hello World', 

			// version: major, minor, revision, i.e. 100 = 1.0.0
			'version' => 100, 

			// summary is brief description of what this module is
			'summary' => 'An example module used for demonstration purposes.',
			
			// Optional URL to more information about the module
			'href' => 'http://www.processwire.com',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {
		
		// add a hook after the $pages->save, to issue a notice every time a page is saved
		$this->pages->addHookAfter('save', $this, 'example1'); 

		// add a hello() method to all Page instances, highlighting a 1000+ foot skyscraper club
		$this->addHook("Page::hello", $this, 'example2'); 

		// add a hook when each page is loaded that makes all architect names uppercase
		$this->addHook("Page::loaded", $this, 'example3'); 

	}

	/**
	 * Example1 hooks into the pages->save method and displays a notice every time a page is saved
	 *
	 */
	public function example1($event) {
		$page = $event->arguments[0]; 
		$this->message("Hello World! You saved {$page->path}. This is a demo of a module that hooks into pages->save()."); 
	}

	/**
	 * Example2 adds a new method to all Page instances, where the return value of $page->hello is populated if the skyscraper is 1000+ feet
 	 *
	 */
	public function example2($event) {

		// $event->object is the object instances the event came from. in this case it's a Page object. 
		$page = $event->object; 

		// if the skyscraper is 1000+ feet, then we'll return some text that says it's in the 1000+ foot club
		if($page->template == 'skyscraper' && $page->height >= 1000) {
			$event->return = "<p><em>At {$page->height} feet, this skyscraper is part of the 1000+ foot club.</em></p>"; 

		// otherwise we'll return nothing
		} else {
			$event->return = '';
		}
	}

	/**
	 * Example3 hooks into every page when it's loaded and if it's an architect, it makes the title uppercase
	 *
	 */
	public function example3($event) {
		$page = $event->object; 
		if($page->template == 'architect') $page->title = strtoupper($page->title); 
	}
	
}
